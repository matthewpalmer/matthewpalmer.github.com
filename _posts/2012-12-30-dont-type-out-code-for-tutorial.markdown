---
layout: post
title: Don't Type Out Code If You're Following A Conceptual Tutorial
category: web

excerpt: Recipe for horrible learning? Maybe not as much as you'd think.
---

<p>As part of my <a href="http://matthewpalmer.tk/index.php/posts/my-first-ios-app">ongoing efforts</a> I decided to look into Core Data for iOS. Naturally, I turned to Apple's own brilliant <a href="http://developer.apple.com/library/ios/documentation/DataManagement/Conceptual/iPhoneCoreData01/iPhoneCoreData01.pdf">developer doc</a> on the subject. Something interesting happened when following this tutorial: they were using a different version of Xcode/iOS. Maybe I could have converted everything up to current standards, but, being pressed for time, I decided to skip typing out the code on my own, and just read and annotate (in Preview) the PDF as I went along. Recipe for ineffective learning? Maybe not as much as you'd think.</p><br/><p>The first thing I noticed was speed. I got through the document in less than a third of the time it would take when typing out the code. Makes sense right? Typing naturally takes longer than reading. This has many benefits other than being less time consuming. Firstly, it let me keep the concepts in my brain without having to swap into a mindset for syntax and coding. I wasn't getting distracted by a spelling mistake or a missing semi colon. I could concentrate on the ideas. Because it was so quick to go through, I absorbed the necessary concepts behind the information in quick succession, each part layering over its predecessor. The layers fit together purely, rather than random code snippets interjecting themselves into the ideas.</p><br/><p> I'm not saying the code isn't important - it is - but on the whole you don't really need to <strong>know</strong> the code. Realistically, you can easily Google the implementation code for anything; it is harder to Google how the different parts and ideas mesh together. What's even more important is that I could skim the code sections. I would reach each code block quickly, understand the ideas behind what it was doing and relate them to the prose. I could highlight the few lines of code critical to getting Core Data working, and skip the large amount of unrelated code. This is probably the most useful thing: I wasn't wasting time getting the trivial app to work. Often in tutorials, we are so caught up in the finished product that we lose the conceptual understanding behind the article.  </p><br/><p> If you're wondering whether the lack of two-way participation is an issue... maybe. The results are yet to be tangible, but I certainly noticed a difference in how easily I understood the concepts behind the code. Regardless, you can participate in the reading without typing out code. Try taking notes on a piece of paper, highlighting a PDF, annotating and drawing lines all over the place, write things out in your own words. This might not work for code-heavy tutorials, but for conceptual foundations (such as Core Data) it's definitely worthwhile skipping the code on the first read through. You'll read the conceptual stuff quicker next time around, and you won't have to awkwardly transition from coding to concepts in ten seconds. </p><br/><p>Try it.</p><br/><br/><p><a href="http://twitter.com/p_almer">Follow me on Twitter.</a></p>